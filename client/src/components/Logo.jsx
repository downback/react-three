/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useLayoutEffect } from "react"
import { useGLTF, useScroll } from "@react-three/drei"
import { useThree, useFrame } from "@react-three/fiber"
import gsap from "gsap"
import { ScrollTrigger } from "gsap/dist/ScrollTrigger"
import { useControls } from "leva"

export function Logo(props) {
  const { nodes, materials } = useGLTF("/nami.gltf")
  const logo = useRef()
  const { scene, camera } = useThree()
  const tl = gsap.timeline()

  console.log(camera.position)

  // const { cameraPosition, scenePosition, sceneRotation } = useControls({
  //   cameraPosition: {
  //     value: {
  //       x: 5,
  //       y: 4,
  //       z: 2.8,
  //     },
  //     step: 0.05,
  //   },
  //   scenePosition: {
  //     value: { x: 3.01, y: 0.76, z: 3.7 },
  //     step: 0.05,
  //   },

  //   sceneRotation: {
  //     value: { x: -0.53, y: -3.48, z: -0.21 },
  //     step: 0.01,
  //   },
  // })

  useLayoutEffect(() => {
    new ScrollTrigger({})
    // component About.tsx
    tl.to(camera.position, {
      x: 5,
      y: 4.0,
      z: 2.8,
      scrollTrigger: {
        trigger: "#sec1",
        start: "top bottom",
        end: "top top",
        scrub: true,
        immediateRender: false,
      },
    })
      .to(scene.position, {
        x: 3.01,
        y: 0.76,
        z: 3.7,
        scrollTrigger: {
          trigger: "#sec1",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })

      .to(scene.rotation, {
        x: -0.53,
        y: -3.48,
        z: -0.21,
        scrollTrigger: {
          trigger: "#sec1",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })

      // component - BuyNow.tsx
      .to(camera.position, {
        x: 5,
        y: 3.8,
        z: 2.8,
        scrollTrigger: {
          trigger: "#sec2",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.position, {
        x: 2.31,
        y: 0.01,
        z: -0.7,
        scrollTrigger: {
          trigger: "#sec2",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.rotation, {
        x: 0.67,
        y: -12.9,
        z: 0.79,
        scrollTrigger: {
          trigger: "#sec2",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
  }, [])

  return (
    <group {...props} dispose={null} ref={logo} position={[2, 1, -1]}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_0.geometry}
        material={nodes.mesh_0.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_1.geometry}
        material={nodes.mesh_1.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_2.geometry}
        material={nodes.mesh_2.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_3.geometry}
        material={nodes.mesh_3.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh_4.geometry}
        material={nodes.mesh_4.material}
      />
    </group>
  )
}

useGLTF.preload("/nami.gltf")
